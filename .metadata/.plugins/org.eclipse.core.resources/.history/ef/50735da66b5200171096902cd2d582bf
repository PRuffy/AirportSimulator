/** 
 * 
 */
package framework

import framework.environment.Graph
import framework.environment.SituatedObject
import framework.environment.QuadTree
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.parsers.DocumentBuilder
import java.io.File
import org.w3c.dom.Document
import javax.xml.parsers.ParserConfigurationException
import org.xml.sax.SAXException
import java.io.IOException
import org.w3c.dom.Element
import org.w3c.dom.NodeList
import org.w3c.dom.Node


/** 
 * @author stay
 * 
 */
class CreationOfEnv {
	def createGraph(filename : String, graph : Graph, objTree : QuadTree<SituatedObject>){
		try{
			var dbFactory : DocumentBuilderFactory
			dbFactory = DocumentBuilderFactory.newInstance()
			
			var dBuilder : DocumentBuilder
			dBuilder = dbFactory.newDocumentBuilder()
			
			var doc : Document
			doc = dBuilder.parse(filename)
			
			doc.getDocumentElement().normalize()
			
			System.out.println("Root Element :" + doc.getDocumentElement().getNodeName())
			
			var nodeList : NodeList
			nodeList = doc.getElementsByTagName("node")
			
			var edgeList : NodeList
			edgeList =  doc.getElementsByTagName("edge")
			
			System.out.println("------------------------")
			
			var i : int
			
			for(i=0; i<nodeList.getLength;i++){
				var node : Node
				node = nodeList.item(i)
				
				System.out.println("\n Current Element :" + node.getNodeName())
				
				if(node.getNodeType()=== Node.ELEMENT_NODE){
					var eElement : Element
					eElement = node as Element
					
					System.out.println("Node id: "+ eElement.getAttribute("id"))
					System.out.println("Node name : "+ eElement.getElementsByTagName("name").item(0).getTextContent())
					System.out.println("Node coordinate :"+ eElement.getElementsByTagName("coordinates").item(0).getTextContent())
				}
			}
			
		}catch(e : Exception){
			e.printStackTrace()
		}
		
	}
}
